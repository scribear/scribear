name: "Build Containers"
description: "Builds docker containers using provided config for linux/amd64 and linux/arm64."
inputs:
  image_name:
    description: "Container image name (e.g., scribear/app)."
    required: true
  build_context:
    description: "Docker build context."
    required: true
  dockerfile:
    description: "Path to the Dockerfile."
    required: true
  dockerhub_username:
    description: "DockerHub username."
    required: true
  dockerhub_password:
    description: "DockerHub password."
    required: true
runs:
  using: "composite"
  steps:
    # Generate tags and labels for the Docker image
    - name: Generate Container Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.image_name }}
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    # Build different platforms first using independent buildcaches without pushing
    #   This ensures buildcache isn't overritten by other architectures, so builds can 
    #   take actually advantage of caching (vs buildcache always containg the wrong architecture image)
    - name: Build linux/amd64
      uses: docker/build-push-action@v6
      with:
        push: false
        context: ${{ inputs.build_context }}
        file: ${{ inputs.dockerfile }}
        platforms: "linux/arm64"
        # Use build cache for faster builds
        cache-from: |
          type=registry,mode=max,ref=${{ inputs.image_name }}:buildcache-linux-amd64
        cache-to: type=registry,mode=max,ref=${{ inputs.image_name }}:buildcache-linux-amd64

    - name: Build linux/arm64
      uses: docker/build-push-action@v6
      with:
        push: false
        context: ${{ inputs.build_context }}
        file: ${{ inputs.dockerfile }}
        platforms: "linux/arm64"
        # Use build cache for faster builds
        cache-from: |
          type=registry,mode=max,ref=${{ inputs.image_name }}:buildcache-linux-arm64
        cache-to: type=registry,mode=max,ref=${{ inputs.image_name }}:buildcache-linux-arm64

    # After independent builds, build images with all architectures combined and push
    #   Combining all architectures ensures that the final tagged image doesn't get overritten by the last architecture that pushes
    #   Instead a single tagged image that supports all architectures are created
    #   Since builds were run independently, this combined step can take advantage of all of the buildcaches
    - name: Push Images
      uses: docker/build-push-action@v6
      with:
        push: true
        context: ${{ inputs.build_context }}
        file: ${{ inputs.dockerfile }}
        platforms: "linux/amd64,linux/arm64"
        # Tag image with generated tags and labels
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Use build cache for faster builds
        cache-from: |
          type=registry,mode=max,ref=${{ inputs.image_name }}:buildcache-linux-amd64
          type=registry,mode=max,ref=${{ inputs.image_name }}:buildcache-linux-amd64
